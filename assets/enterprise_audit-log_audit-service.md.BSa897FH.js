import{_ as t,c as i,o as a,ag as o}from"./chunks/framework.S-Qvb3wi.js";const u=JSON.parse('{"title":"Audit Log: Backend Implementation","description":"","frontmatter":{},"headers":[],"relativePath":"enterprise/audit-log/audit-service.md","filePath":"enterprise/audit-log/audit-service.md"}'),n={name:"enterprise/audit-log/audit-service.md"};function r(s,e,c,h,l,d){return a(),i("div",null,e[0]||(e[0]=[o('<h1 id="audit-log-backend-implementation" tabindex="-1">Audit Log: Backend Implementation <a class="header-anchor" href="#audit-log-backend-implementation" aria-label="Permalink to &quot;Audit Log: Backend Implementation&quot;">​</a></h1><p>The backend implementation of the audit log is handled by the <code>AuditService</code>, located in <code>packages/backend/src/services/AuditService.ts</code>. This service encapsulates all the logic for creating, retrieving, and verifying audit log entries.</p><h2 id="hashing-and-verification-logic" tabindex="-1">Hashing and Verification Logic <a class="header-anchor" href="#hashing-and-verification-logic" aria-label="Permalink to &quot;Hashing and Verification Logic&quot;">​</a></h2><p>The core of the audit log&#39;s immutability lies in its hashing and verification logic.</p><h3 id="hash-calculation" tabindex="-1">Hash Calculation <a class="header-anchor" href="#hash-calculation" aria-label="Permalink to &quot;Hash Calculation&quot;">​</a></h3><p>The <code>calculateHash</code> method is responsible for generating a SHA-256 hash of a log entry. To ensure consistency, it performs the following steps:</p><ol><li><strong>Canonical Object Creation:</strong> It constructs a new object with a fixed property order, ensuring that the object&#39;s structure is always the same.</li><li><strong>Timestamp Normalization:</strong> It converts the <code>timestamp</code> to milliseconds since the epoch (<code>getTime()</code>) to avoid any precision-related discrepancies between the application and the database.</li><li><strong>Canonical Stringification:</strong> It uses a custom <code>canonicalStringify</code> function to create a JSON string representation of the object. This function sorts the object keys, ensuring that the output is always the same, regardless of the in-memory property order.</li><li><strong>Hash Generation:</strong> It computes a SHA-256 hash of the canonical string.</li></ol><h3 id="verification-process" tabindex="-1">Verification Process <a class="header-anchor" href="#verification-process" aria-label="Permalink to &quot;Verification Process&quot;">​</a></h3><p>The <code>verifyAuditLog</code> method is designed to be highly scalable and efficient, even with millions of log entries. It processes the logs in manageable chunks (e.g., 1000 at a time) to avoid loading the entire table into memory.</p><p>The verification process involves the following steps:</p><ol><li><strong>Iterative Processing:</strong> It fetches the logs in batches within a <code>while</code> loop.</li><li><strong>Chain Verification:</strong> For each log entry, it compares the <code>previousHash</code> with the <code>currentHash</code> of the preceding log. If they do not match, the chain is broken, and the verification fails.</li><li><strong>Hash Recalculation:</strong> It recalculates the hash of the current log entry using the same <code>calculateHash</code> method used during creation.</li><li><strong>Integrity Check:</strong> It compares the recalculated hash with the <code>currentHash</code> stored in the database. If they do not match, the log entry has been tampered with, and the verification fails.</li></ol><h2 id="service-integration" tabindex="-1">Service Integration <a class="header-anchor" href="#service-integration" aria-label="Permalink to &quot;Service Integration&quot;">​</a></h2><p>The <code>AuditService</code> is integrated into the application through the <code>AuditLogModule</code> (<code>packages/enterprise/src/modules/audit-log/audit-log.module.ts</code>), which registers the API routes for the audit log feature. The service&#39;s <code>createAuditLog</code> method is called from various other services throughout the application to record significant events.</p>',13)]))}const p=t(n,[["render",r]]);export{u as __pageData,p as default};
